package main

// 264. 丑数 II

// 给你一个整数 n ，请你找出并返回第 n 个 丑数 。
//
// 丑数 就是质因子只包含 2、3 和 5 的正整数。

// nthUglyNumber .
// 每个丑数都可以由其他较小的丑数通过 乘以 2、3、5 得到
func nthUglyNumber(n int) int {
	// 构造dp数组 -- dp[i]表示第i个丑数，dp[i]由dp[0, i-1]范围内的其它丑数 乘以 2、3、5 得到
	dp := make([]int, n)

	// dp数组初始化 -- 第一个丑数为1
	dp[0] = 1

	// 不断dp根据已有丑数求出下一个丑数
	x2, x3, x5 := 0, 0, 0 // 下一个需要 x2、x3、x5 的丑数下标 -- 需要按照大小关系获取下一个丑数是什么
	for i := 1; i < n; i++ {
		// 获取乘完之后最小的那个作为下一个丑数
		n2, n3, n5 := dp[x2]*2, dp[x3]*3, dp[x5]*5
		dp[i] = min(min(n2, n3), n5)

		// 根据实际使用了哪个数字，递增下一个需要 x2、x3、x5 的丑数下标
		if dp[i] == n2 {
			x2++
		}
		if dp[i] == n3 {
			x3++
		}
		if dp[i] == n5 {
			x5++
		}
	}

	// 返回第n个丑数
	return dp[n-1]
}
