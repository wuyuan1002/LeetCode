package main

// 91. 解码方法

// 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
//
// 'A' -> "1"
// 'B' -> "2"
// ...
// 'Z' -> "26"
// 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
//
// "AAJF" ，将消息分组为 (1 1 10 6)
// "KJF" ，将消息分组为 (11 10 6)
// 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
//
// 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
//
// 题目数据保证答案肯定是一个 32 位 的整数。

// numDecodings .
// 同 leetcode 509. 斐波那契数、70. 爬楼梯
//
// dp[i]表示以s[i-1]结尾的子串的解码方法个数
// dp[i] =
//   1. s[i-1]只能单独进行解码构成字母 -- dp[i] = dp[i-1]
//   2. s[i-1]不能单独进行解码构成字母，但是可以和前一个字母组合起来进行解码构成字母 -- dp[i] = dp[i-2]
//   2. s[i-1]既能单独进行解码构成字母也能和前一个字母组合起来进行解码构成字母 -- dp[i] = dp[i-1] + dp[i-2]
func numDecodings(s string) int {
	// 构造dp数组 -- dp[i]表示以s[i-1]结尾的子串的解码方法个数
	dp := make([]int, len(s)+1)

	// 初始化dp数组 -- dp[0]=1只是为了后续可以正常滚动计算下去的初始值，其余位置默认都为0，dp[1]开始才是真正的字符解码个数
	dp[0] = 1

	// 开始dp -- 求s的第1个到最后一个字符结尾的解码个数
	for i := 1; i <= len(s); i++ {
		// 若当前字符不是0说明当前字符可以单独解码为A~J --  -- 以当前位置结尾的解码个数 += dp[i-1] -- 当前位置单独解码时，以当前位置字符结尾的解码个数与前一个字符结尾的解码个数相同
		if s[i-1] != '0' {
			dp[i] += dp[i-1]
		}

		// 若当前位置字符可以与前一个字符组合进行解码构成字母 -- 以当前位置结尾的解码个数 += dp[i-2]
		if i > 1 && s[i-2] != '0' && ((s[i-2]-'0')*10+(s[i-1]-'0') <= 26) {
			dp[i] += dp[i-2]
		}
	}

	return dp[len(s)]
}
