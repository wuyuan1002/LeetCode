package main

// 119. 杨辉三角 II

// 给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。
//
// 在「杨辉三角」中，每个数是它左上方和右上方的数的和。

// getRow .
// 同 leetcode 118. 杨辉三角
// 1. 动态规划，使用118的方式，求出前rowIndex行，然后返回第rowIndex行的内容
// 2. 滚动数组，由于第i行只依赖第i-1行的数据，所以没必要使用二维dp，而是使用一维dp求当前行的内容即可
//
// i
// 0 | 1
// 1 | 1    1
// 2 | 1    2    1
// 3 | 1    3    3    1
// 4 | 1    4    6    4    1
//   +--------------------------
//     0    1    2    3    4    j
func getRow(rowIndex int) []int {
	// 创建dp数组
	dp := make([]int, rowIndex+1)

	// 初始化dp数组 -- 第0行的数字是1
	dp[0] = 1

	// 开始dp -- 遍历每一行，求第1行到第rowIndex行的数字内容
	for i := 1; i <= rowIndex; i++ {
		// 遍历计算当前行每个下标的数字，此处必须倒序遍历，因为当前行下标j处的得数依赖前一行下标j-1处的数字，
		// 若正序遍历则会被当前行覆盖，只有倒序遍历计算时，当前行计算到第j项时，第j−1项仍然是上一行的值
		for j := i; j > 0; j-- {
			dp[j] += dp[j-1]
		}
	}

	return dp
}
