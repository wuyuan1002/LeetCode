package main

// 26. 删除有序数组中的重复项

// 给你一个有序数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。
//
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// removeDuplicates .
// leetcode 80. 删除有序数组中的重复项 II
//
// 双指针 -- 左指针左面的数字都是没有重复元素的（不包括左指针本身指向的数字）
// 因为数组本身有序，所以相同元素必然连续，右指针指向的数字一定大于或等于左指针指向的数字
func removeDuplicates(nums []int) int {
	// 左右指针 -- 从第2个数字开始，因为每个数字可以出现1次，所以第1个数字一定是满足条件的
	l, r := 1, 1

	// 向右移动右指针，寻找与左指针前1位不一样的数字交换给左指针然后向右移动左指针
	for r < len(nums) {
		// 若当前右指针指向的数字与左指针左侧数字不一致，说明这个数字首次出现，将其赋值给左指针所指位置并将左指针向右移动一位
		if nums[r] != nums[l-1] {
			nums[l] = nums[r]
			l++
		}

		// 每次循环都将右指针向右移动一位
		r++
	}

	// 最终左指针及其前面的数字就是不重复的数字
	return l
}
