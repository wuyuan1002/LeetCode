package main

// 75. 颜色分类

// 给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
// 我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
//
// 必须在不使用库内置的 sort 函数的情况下解决这个问题。

// sortColors .
// 1. 插入排序
// 2. 双指针 -- [0, l)为0、[l, r]为1、(r, len(nums)-1]为2
// 从头至尾遍历每个数字，根据数字的值与双指针位置的数字进行交换将其归类至对应区域并移动双指针
func sortColors(nums []int) {
	// 双指针 -- [0, l)为0、[l, r]为1、(r, len(nums)-1]为2
	l, r := 0, len(nums)-1

	// 不断向后遍历i，根据i位置的数字值，与l和r指针位置的数字进行交换并移动双指针
	for i := 0; i <= r; {
		if nums[i] == 0 {
			// 若i指向的数字为0，则将i与l指向的数字交换，因为l在i的左侧，所以l指向的数字一定是1，
			// 这里交换只是为了将0交换到l的左侧，所以交换完后可以直接将l和i都向后移动
			nums[l], nums[i] = nums[i], nums[l]
			l++
			i++
		} else if nums[i] == 1 {
			// 若i指向的数字为1，说明数字所在的位置正确，继续向后移动i
			i++
		} else if nums[i] == 2 {
			// 若i指向的数字为2，则将i与r指向的数字交换并向左移动r，将当前这个2交换到r的右侧，因为r在i的右侧，
			// 交换过来的这个新的数字并不知道是几，所以这里不能向后移动i而是继续判断这个数字是几
			nums[r], nums[i] = nums[i], nums[r]
			r--
		}
	}
}
