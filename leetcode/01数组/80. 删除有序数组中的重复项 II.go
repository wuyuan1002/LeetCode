package main

// 80. 删除有序数组中的重复项 II

// 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。
//
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// removeDuplicates80 .
// leetcode 26. 删除有序数组中的重复项
//
// 双指针 -- 左指针左面的数字都是满足条件的（不包括左指针本身指向的数字）-- [0, l)
// 因为数组本身有序，所以相同元素必然连续，右指针指向的数字一定大于或等于左指针指向的数字
// 因为每个数字允许出现2次，所以进行比较时，使用左指针前两位的数字来和右指针的数字进行比较
func removeDuplicates80(nums []int) int {
	if len(nums) < 3 {
		return len(nums)
	}

	// 左右指针 -- 默认从第3个数字开始遍历，因为每个数字允许出现2次，所以前两个数字即使一样也是符合预期的
	l, r := 2, 2

	// 向右遍历右指针，寻找与左指针前2位不一样的数字交换给左指针然后向右移动左指针
	for r < len(nums) {
		// 若当前右指针指向的数字与左指针左侧前2位数字不一致，说明这个数字出现没超过2次，将其赋值给左指针所指位置并将左指针向右移动一位
		if nums[r] != nums[l-2] {
			nums[l] = nums[r]
			l++
		}

		// 每次循环都将右指针向右移动一位
		r++
	}

	// 最终左指针及其前面的数字就是出现不超过2次的数字
	return l
}
