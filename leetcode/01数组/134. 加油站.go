package main

// 134. 加油站

// 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
//
// 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
//
// 给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。

// canCompleteCircuit .
// 遍历从每一个加油站作为起点，查看能否行驶一周
//
// 其实不必挨个遍历每一个坐标作为起点，因为假设从第0个加油站出发，最多只能到第5个加油站便不能继续往下行驶了，
// 那么下一次遍历可以直接查看以第6个加油站作为起点能否绕行一周，因为既然从0出发最远到达5，
// 那么从1、2、3、4出发也必然最远到达5，原因是比如从0-5行驶时，对于3-5来说，0-3只会使油箱剩余油量，让3之后走得更远，
// 所以既然0出发都最远到5，那么中间任何加油站出发，都最远只能到5
func canCompleteCircuit(gas []int, cost []int) int {
	// 当前汽车的起点位置
	start := 0

	// 从起点出发到当前加油站的剩余油量、所有加油站的总油量减去总消耗油量后的剩余油量
	currentRemain, totalRemain := 0, 0

	// 遍历以第i个加油站作为起点，查看能否绕行一周
	for i := 0; i < len(gas); i++ {
		// 计算到达当前加油站，当前加油站能够为汽车贡献的油量 -- 每个加油站对车辆的贡献值为: gas[i] - cost[i]
		currentRemain += gas[i] - cost[i]
		totalRemain += gas[i] - cost[i]

		// 若当前油箱剩余油量不足，说明不足以到达下一个加油站，那么继续计算以下一个加油站出发能否绕行一周
		if currentRemain < 0 {
			start = i + 1
			currentRemain = 0
		}
	}

	// 若最终遍历完所有加油站，假设从5-9可以走完，但是题目要求是绕行一周，也就是5-9-0-5，所以要看整体的油量贡献值是否大于0，
	// totalRemain表示所有加油站的贡献值，若小于0说明所有加油站的油量总和小于总消耗的油量，一定不能绕行一周 -- 即总油量要大于总消耗
	if totalRemain < 0 {
		return -1
	}

	return start
}
