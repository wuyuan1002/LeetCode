package main

// 453. 最小操作次数使数组元素相等

// 给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。

// minMoves .
// 由于只需要将数组内数字大小变为一样即可，不需要考虑最终数字为多大，即不需要考虑各数字的绝对大小，只需要考虑数组中元素相对大小的变化即可，
// 所以「每次操作会使n-1个元素增加1」可以理解为「每次操作会使1个元素减小1」，
// 因此，要计算让数组中所有元素相等的操作数，我们只需要计算将数组中所有元素都减少到数组中元素最小值所需的操作数即可，
// 也就是逐个累加每个元素与数组中元素最小值的差即为答案
func minMoves(nums []int) int {
	// 获取数组中元素的最小值
	minNum := nums[0]
	for _, num := range nums {
		if num < minNum {
			minNum = num
		}
	}

	// 累加每个元素与数组中元素最小值的差
	result := 0
	for _, num := range nums {
		result += num - minNum
	}

	return result
}
