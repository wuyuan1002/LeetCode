package main

// 137. 只出现一次的数字 II

// 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。
// 请你找出并返回那个只出现了一次的元素。
//
// 你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。

// singleNumber137 .
// 考虑数字的二进制形式，对于出现三次的数字，各 二进制位 出现的次数都是 3 的倍数，
// 因此，统计所有数字的各二进制位中 1 的出现次数，并对 3 取余，结果则为只出现一次的数字
func singleNumber137(nums []int) int {
	// 总结果
	result := int32(0)

	// 因为是32位数字，所以遍历每个数字的32位，求数组中对应位的1出现的次数
	for i := 0; i < 32; i++ {
		// 遍历数组，求出数组中所有数字在第i位上为1的个数
		total := int32(0)
		for _, num := range nums {
			total += int32(num) >> i & 1
		}

		// 若第i位1出现的次数与3取余后为1，说明只出现一次的数字在该位为1，将结果的该位置为1 -- 在第i位出现1的次数，只能是1、3、4次，与3取余后只能是0和1
		if total%3 == 1 {
			result |= 1 << i
		}
	}

	return int(result)
}
