package main

import "sort"

// 274. H 指数

// 给你一个整数数组 citations ，其中 citations[i] 表示研究者的第 i 篇论文被引用的次数。计算并返回该研究者的 h 指数。
//
// 根据维基百科上 h 指数的定义：h 代表“高引用次数” ，一名科研人员的 h 指数 是指他（她）至少发表了 h 篇论文，
// 并且 至少 有 h 篇论文被引用次数大于等于 h 。如果 h 有多种可能的值，h 指数 是其中最大的那个。

// hIndex .
// 可以理解为数组中至少有h个数字的值大于h，求h的最大值
//
// 将数组进行降序排序（将论文按照被引用的次数降序排列），排完序后citations[i]表示第i+1篇论文的引用次数，并且至少有i+1篇论文的引用次数>=当前论文引用次数。
// 所以遍历数组寻找最后一个满足 citations[i] >= i+1 的i并将其返回即可（为什么是i+1呢？因为下标从0开始，而数字计数从1开始）
//
// 如 hIndex([]int{3, 0, 6, 1, 5}):
//
//        6    5    3    1    0
// 7 |
// 6 |    *
// 5 |    *    *
// 4 |    *    *
// 3 |----*----*----*------------  --> 最后一个满足citations[i] >= i+1的下标i，返回i+1
// 2 |    *    *    *
// 1 |    *    *    *    *
//   +---------------------------
//        0    1    2    3    4
func hIndex(citations []int) int {
	// 将数组进行降序排序
	sort.Slice(citations, func(i, j int) bool { return citations[i] > citations[j] })

	// 寻找最后一个满足 citations[i] >= i+1 的下标，并将其+1后返回（为什么是i+1呢？因为下标从0开始，而数字计数从1开始）
	// 此处倒序遍历数字，因为正序遍历寻找最后一个满足条件的下标，也就是倒序遍历寻找第一个满足条件的下标，倒序遍历可以少用一个变量存满足条件的前一个下标值
	for i := len(citations) - 1; i >= 0; i-- {
		if citations[i] >= i+1 {
			// 找到第一个满足条件的值将其下标+1后返回
			return i + 1
		}
	}
	return 0
}
