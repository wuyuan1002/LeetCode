package main

// 66. 加一

// 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
// 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
//
// 你可以假设除了整数 0 之外，这个整数不会以零开头。

// plusOne .
// 倒序遍历数组，若该位数字小于9则直接加一返回，若该位数字正好为9说明需要加一进位，将当前位数字置为0，然后在下一位数字加一，若下一位还是9则继续进位加一
func plusOne(digits []int) []int {
	for i := len(digits) - 1; i >= 0; i-- {
		// 若当前位小于9，直接在当前位加一返回即可 -- 可能是没有进位的加一，也可能是后一位置为0后的进位加一
		if digits[i] < 9 {
			digits[i]++
			return digits
		}

		// 若当前位为9，将当前位置为0，然后进入下一次循环，将进位加一到前一位
		digits[i] = 0
	}

	// 若一直进位加一，没有小于9的数字加一返回，说明整个数字所有位都是9，数字长度+1且第一位是1 - 如999 -> 1000
	return append([]int{1}, digits...)
}
