package main

import "sort"

// 628. 三个数的最大乘积

// 给你一个整型数组 nums ，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

// maximumProduct .
// 数组中数字有正有负，所以最大乘积可能为以下情况：
// - 数组都为正数：乘积最大值为最大的三个数相乘
// - 数组都为负数：乘积最大值为最大的三个数相乘
// - 数组有正有负：乘积最大值为 max(最大的三个数相乘, 最大的一个正数和最小的两个负数相乘)
// 因此，遍历数组，获取其中最大的三个数和最小的两个数，比较max(最大的三个数相乘, 最大的一个正数和最小的两个负数相乘)
func maximumProduct(nums []int) int {
	// 排序后就能得到最大的三个数和最小的两个数，或者不直接排序而是遍历数组使用5个变量记录目标数字也可
	sort.Ints(nums)

	n := len(nums)
	return max(nums[0]*nums[1]*nums[n-1], nums[n-3]*nums[n-2]*nums[n-1])
}
