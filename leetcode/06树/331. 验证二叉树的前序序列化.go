package main

import "strings"

// 331. 验证二叉树的前序序列化

// 序列化二叉树的一种方法是使用 前序遍历 。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。
// 给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。

// isValidSerialization .
// 使用一个变量slot进行槽位计数，槽位表示正在等待被节点填充的节点位置数量，
// - 当填充一个非空节点时，占用一个槽位，并新增两个槽位（其左右子节点）
// - 当填充一个空节点时，占用一个槽位
// 最终遍历完后若槽位数正好也为空，说明是正确的序列
func isValidSerialization(preorder string) bool {
	// 定义一个变量进行槽位计数 -- 初始值为1表示有一个槽位等待填充
	slots := 1

	// 遍历每一个节点，进行槽位的计数更新
	for _, node := range strings.Split(preorder, ",") {
		// 若节点还没填充完，但是已经没有槽位了，说明序列不正确 -- 没有槽位填充当前节点了
		if slots == 0 {
			return false
		}

		if node == "#" {
			// 若当前节点为空节点 -- 直接占用一个槽位
			slots--
		} else {
			// 若当前节点为非空节点 -- 占用一个槽位，并添加两个槽位（slots = slots - 1 + 2）
			slots++
		}
	}

	// 若最终槽位数正好为0，说明是正确的序列
	return slots == 0
}
