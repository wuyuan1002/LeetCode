package main

// 739. 每日温度

// 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，
// 其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。
// 如果气温在这之后都不会升高，请在该位置用 0 来代替。

// dailyTemperatures .
// 单调栈 -- 单调递增栈
// 一维数组中要寻找任一个元素的右边或者左边第一个比自己大或者小的元素，此时就可以用单调栈解决
func dailyTemperatures(temperatures []int) []int {

	result := make([]int, len(temperatures)) // 总结果
	stack := make([]int, 0)                  // 单调递增栈，用于存还没有出现比自己更高温度的天，栈内元素都是待计算的，温度低的位于栈顶

	for i := 0; i < len(temperatures); i++ {
		// 若当前元素大于单调递增栈顶元素，说明当前元素是栈内部分元素的下一个比自己大的数字，栈内部分元素找到了比自己更高温度出现的天
		// 计算栈内比当前元素小的元素与当前元素的下标差值 -- 计算栈内比当前元素小的下一个比自己高的温度出现在几天后
		for len(stack) > 0 && temperatures[i] > temperatures[stack[len(stack)-1]] {
			// 获取栈内栈顶元素并出栈 -- 获取栈内第一个比当前元素小的天 -- 当前元素左边第一个比自己小的数字
			top := stack[len(stack)-1]
			stack = stack[:len(stack)-1]

			// 计算当前元素和左边数字top的下标差值即为左边数字top距离其右边第一个比自己大的数字的距离 -- 左边数字top的下一个比自己更高温度出现在几天后
			result[top] = i - top
		}

		// 计算完栈内比当前元素小的元素后，栈内元素逗比当前元素大了，将当前元素入栈
		// 当前元素右边比当前元素大的元素还没出现，将当前元素加入单调栈，等待大的元素出现后再被计算
		stack = append(stack, i)
	}

	// 数组所有元素都遍历完后，单调栈内可能还存在元素，
	// 那些都是在它们之后没有出现比其更大的元素了，也就是没有出现比他们更高的温度了，
	// 它们也就不用再计算了，他们距离下一个比其更高温度出现的距离为0
	return result
}
