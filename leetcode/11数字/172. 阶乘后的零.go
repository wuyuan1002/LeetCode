package main

// 172. 阶乘后的零

// 给定一个整数 n ，返回 n! 结果中尾随零的数量。
//
// 提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1

// trailingZeroes .
// 一个数字末尾有多少个0，也就是这个数字被乘了多少次10。而只有2*5=10，因此可以转换为一个数字被乘了多少次2*5，
// 而从1到n，为2的倍数的数字每2个出现一次，为5的倍数的数字每5个出现一次，因此每出现一个为5的倍数的数字都一定会出现一个2*5（因为两个为5的倍数的数字中间一定会间隔几个为2的倍数的数字来提供2）
// 因此问题又转换成了求1到n的数字中为5的倍数的数字个数
//
// 6! = 6 * 5 * 4 * 3 * 2 * 1 = 6 * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1 -> 只有一对2*5，所以末尾只有一个0
// 11! = 11 * 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 11 * (2 * 5) * 9 * (4 * 2) * 7 * (3 * 2) * (1 * 5) * (2 * 2) * 3 * (1 * 2) * 1 -> 有两对2*5，所以末尾有两个0
func trailingZeroes(n int) int {
	count := 0
	for n > 0 {
		n /= 5
		count += n
	}
	return count
}
