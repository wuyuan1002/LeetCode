package main

// 190. 颠倒二进制位

// 颠倒给定的 32 位无符号整数的二进制位。

// reverseBits .
// 如 10011011 -> 11011001
// 1. 循环32次，每次把result左移，把num的二进制末尾数字，拼接到结果result的末尾。然后把num右移
func reverseBits(num uint32) uint32 {
	var result uint32 = 1
	for i := 0; i < 32; i++ {
		result = (result << 1) | (num & 1)
		num >>= 1
	}
	return result
}

// reverseBits1 .
// 2. 分治，将num的二进制位分为两半，然后交换这两半的顺序；然后把前后两个半段都再分成两半，交换内部顺序...直至最后交换顺序的时候，交换的数字只有1位
// 0xff00ff00 -- 11111111000000001111111100000000、0x00ff00ff -- 00000000111111110000000011111111
// 0xf0f0f0f0 -- 11110000111100001111000011110000、0x0f0f0f0f -- 00001111000011110000111100001111
// 0xcccccccc -- 11001100110011001100110011001100、0x33333333 -- 00110011001100110011001100110011
// 0xaaaaaaaa -- 10101010101010101010101010101010、0x55555555 -- 01010101010101010101010101010101
func reverseBits1(num uint32) uint32 {
	num = (num >> 16) | (num << 16)
	num = ((num & 0xff00ff00) >> 8) | ((num & 0x00ff00ff) << 8)
	num = ((num & 0xf0f0f0f0) >> 4) | ((num & 0x0f0f0f0f) << 4)
	num = ((num & 0xcccccccc) >> 2) | ((num & 0x33333333) << 2)
	num = ((num & 0xaaaaaaaa) >> 1) | ((num & 0x55555555) << 1)
	return num
}
