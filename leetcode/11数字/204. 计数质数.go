package main

// 204. 计数质数

// 给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。

// countPrimes .
// 如果一个数x是质数，那么大于x的倍数 如2x、3x... 一定不是质数
//
// 1. 使用一个map存遍历过程中得到的所有质数，从小到大遍历每个数，对该数字在map中挨个查找，
//    查看是否为已有质数的倍数，若该数字都不是map中已有质数的倍数，则说明当前数字是质数，将其加入到map中，
//    遍历结束后map中的数字就是小于n的所有质数
// 2. 使用一个长度为n的数组isPrime，isPrime[i]表示数字i是否为质数，从小到大遍历每个数，若该数字是质数，
//    则将nums中所有该数字倍数的数字都标记为合数，遍历结束后，isPrime中为true的就是所有的质数，可以在遍历的过程中统计质数的个数
func countPrimes(n int) int {
	result := 0

	// 使用一个长度为n的数组用来标记每个数字是否为质数 -- 初始化默认每个数字都为质数，在遍历过程中将质数保留，合数标记为false
	// 因为求的是小于n的所有质数，所以数组范围只需要[1, n-1]的数字即可，若要求的是小于等于n的所有质数，那么数字长度应该为n+1，这样才能存在[1, n]的所有数字 -- 因为下标0无意义
	isPrime := make([]bool, n)
	for i := range isPrime {
		isPrime[i] = true
	}

	// 遍历每个数字，若数字是质数则将其倍数都标记为合数并递增质数数量
	for i := 2; i < len(isPrime); i++ {
		if isPrime[i] {
			// 递增质数数量
			result++
			// 将当前数字的所有倍数都标记为合数
			for j := 2 * i; j < n; j += i {
				isPrime[j] = false
			}
		}
	}

	return result
}
