package main

// 205. 同构字符串

// 给定两个字符串 s 和 t ，判断它们是否是同构的。
// 如果 s 中的字符可以按某种映射关系替换得到 t ，那么这两个字符串是同构的。
// 每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。
// 不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。

// isIsomorphic .
//
// 使用两个map存s到t和t到s的字符映射关系，确保两个字符串中的字符双方都是一对一映射关系
// 遍历字符串中的每个字符，若发现当前字符和已存在的映射关系冲突则说明不是同构的
func isIsomorphic(s, t string) bool {
	if len(s) != len(t) {
		return false
	}

	// 使用两个map存s到t和t到s的字符映射关系
	s2t := map[byte]byte{}
	t2s := map[byte]byte{}

	// 按下标遍历两字符串
	// 若发现某个字符已存在映射关系，且当前映射关系与原映射关系不一致，则说明映射冲突
	// 若当前字符还没有出现过映射关系，则将当前字符及其映射字符存入两个map
	for i := 0; i < len(s); i++ {
		// 获取两字符串中当前下标对应的字符
		x, y := s[i], t[i]

		// 若当前字符已存在映射关系且映射的字符与当前映射的字符不一致，则说明映射冲突
		if s2t[x] > 0 && s2t[x] != y || t2s[y] > 0 && t2s[y] != x {
			return false
		}

		// 将当前映射关系存入两map
		s2t[x] = y
		t2s[y] = x
	}

	// 遍历结束后仍未发现映射冲突的字符，则说明两字符串是同构字符串
	return true
}
