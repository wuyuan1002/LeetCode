package main

import (
	"strconv"
	"strings"
)

// 38. 外观数列

// 给定一个正整数 n ，输出外观数列的第 n 项。
//
// 「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。
//
// 你可以将其视作是由递归公式定义的数字字符串序列：
//
// countAndSay(1) = "1"
// countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。
// 前五项如下：
//
// 1.     1
// 2.     11
// 3.     21
// 4.     1211
// 5.     111221
// 第一项是数字 1
// 描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"
// 描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"
// 描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"
// 描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"
//
// 要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。
// 然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。
// 要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。

// countAndSay .
//
// 本质上就是依次统计前一个字符串中连续相同字符的个数
// 使用前一个字符串中每个字符的出现次数和字符本身生成当前字符序列，然后继续统计当前字符串用来生成下一个字符串
func countAndSay(n int) string {
	// 当前要描述的字符序列
	pre := "1"

	// 不断根据pre统计生成当前字符串cur，然后再继续将cur作为pre，生成新的cur
	for i := 2; i <= n; i++ {
		// 当前的字符序列
		cur := &strings.Builder{}

		// 不断统计相同字符出现次数并添加到当前字符序列中
		for j, start := 0, 0; j < len(pre); start = j {
			// 统计当前字符连续出现的次数
			for j < len(pre) && pre[j] == pre[start] {
				j++
			}

			// 添加当前字符出现次数和当前字符
			cur.WriteString(strconv.Itoa(j - start))
			cur.WriteByte(pre[start])
		}

		// 将当前字符序列赋值为下一个要描述的字符序列
		pre = cur.String()
	}

	return pre
}
