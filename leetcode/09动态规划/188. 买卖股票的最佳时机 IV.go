package main

// 188. 买卖股票的最佳时机 IV

// 给定一个整数数组prices ，它的第 i 个元素prices[i] 是一支给定的股票在第 i 天的价格。
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// maxProfit188 .
// 动态规划 -- leetcode 123的进阶版, 当k==2时就和123相同了
//
// 一天共有2*k+1种状态(状态j)：(可以发现，奇数都是买入、偶数都是卖出)
// 0没有操作、1第一次买入、2第一次卖出、3第二次买入、4第二次卖出、5第三次买入、6第三次卖出、7...
//
// dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
func maxProfit188(k int, prices []int) int {
	// 构造dp数组 -- dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
	dp := make([][]int, len(prices))
	for i := range dp {
		// 构造每一天的状态数组 -- 一天共有2*k+1种状态(状态j)
		dp[i] = make([]int, 2*k+1)
	}

	// 初始化dp数组
	dp[0][0] = 0
	for i := 1; i < 2*k; i += 2 {
		// 当i为奇数时初始化第i次买入的剩余现金数、当i为偶数时剩余现金数初始化为0
		dp[0][i] = -prices[0]
	}

	// 遍历所有股票，计算每天各种状态下所持有的最大现金数量
	for i := 1; i < len(prices); i++ {
		// 1. 保持前一天的未操作状态
		dp[i][0] = dp[i-1][0]

		// 遍历每一天的所有状态 -- 计算每天各种状态下所持有的最大现金数量
		for j := 1; j <= 2*k; j++ {
			if j%2 != 0 {
				// 2. 奇数为买入状态 -- 保持前一天的买入状态或在前一天卖出的情况下买入
				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]-prices[i])
			} else {
				// 3. 偶数为卖出状态 -- 保持前一天的卖出状态或在前一天买入的情况下卖出
				dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]+prices[i])
			}
		}
	}

	// 返回最后一天卖出股票后所持有的最大现金数量
	return dp[len(prices)-1][2*k]
}
