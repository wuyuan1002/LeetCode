package main

// 122. 买卖股票的最佳时机 II

// 给定一个数组 prices ，其中prices[i] 是一支给定股票第 i 天的价格。
// 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// maxProfit122 .
// 1. 所有上涨交易日都买卖（赚到所有利润）, 所有下降交易日都不买卖（永不亏钱）
//    等价于每天都买卖 -- 前一天比后一天小,买卖; 前一天比后一天大,不买卖
func maxProfit122(prices []int) int {
	profit := 0 // 总利润
	for i := 1; i < len(prices); i++ {
		// 若当天价格比前一天价格高则进行买卖赚取利润
		if prices[i] > prices[i-1] {
			profit += prices[i] - prices[i-1]
		}
	}
	return profit
}

// maxProfit1221 .
// 2. 动态规划
// 一天共有两种状态(状态j)：0持有股票、1未持有股票
//
// dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
// dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])
// 	 第i天为持有股票的状态时所持有的最大现金数量，可由两种情况得出：
// 	 1. 前一天就已经持有股票，保持现状 -- 即前一天手上的现金数量：dp[i - 1][0]
// 	 2. 当天买入股票 -- 即前一天不持有股票时手上的现金数量减去今天的股票价格： dp[i - 1][1] - prices[i]
// dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])
//   第i天为不持有股票的状态时所持有的最大现金数量，可由两种情况得出：
//   1. 前一天就不持有股票，保持现状 -- 即前一天手上的现金数量：dp[i - 1][1]
//   2. 当天卖出股票 -- 即按照当天价格卖掉手上持有的股票后得到的现金数量：dp[i - 1][0] + prices[i]
func maxProfit1221(prices []int) int {
	// 构造dp数组 -- dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
	dp := make([][2]int, len(prices))

	// 初始化dp数组
	dp[0][0] = -prices[0] // 第1天持有股票时的现金数量 -- 钱都花了, 现在手上剩的钱的负的
	dp[0][1] = 0          // 第1天未持有股票 -- 手上没钱

	// 遍历每天的股票，计算每天持有股票和不持有股票时所持有的现金数量
	for i := 1; i < len(prices); i++ {
		dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i]) // 第i天持有股票可由两种状态得来 -- 1. 前一天已经持有股票、2. 在当天买入股票
		dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]) // 第i天不持有股票两种状态得来 -- 1.前一天就不持有股票、2. 在当天卖出股票
	}

	// 返回最后一天手上不持有股票时的现金数量
	return dp[len(prices)-1][1]
}
