package main

// 309. 买卖股票的最佳时机含冷冻期

// 给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。
// 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
//
// 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// maxProfit309 .
// 一天共有四种状态：
// 0：持有股票状态 -- 今天买入股票，或者是之前就买入了股票然后没有操作
// 卖出股票状态，这里就有两种卖出股票状态
// 		1：未持有股票且已经度过冷冻期
// 		2：今天卖出股票
// 3：冷冻期状态 -- 但冷冻期状态不可持续，只有一天
//
// dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
func maxProfit309(prices []int) int {
	// 构造dp数组 -- dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
	dp := make([][4]int, len(prices))

	// 初始化dp数组 -- 初始化第一天的4种状态
	dp[0][0] = -prices[0]
	dp[0][1] = 0
	dp[0][2] = 0
	dp[0][3] = 0

	// 开始dp -- 计算每天的4种状态下所持有的最大现金数量
	for i := 1; i < len(prices); i++ {
		// 达到今天持有股票，有3种情况：
		// 1. 前一天就已经是持有股票状态 -- dp[i-1][0]
		// 2. 前一天未持有股票且为冷冻期，今天进行股票买入 -- dp[i-1][3] - prices[i]
		// 3. 前一天未持有股票且不是冷冻期，今天进行股票买入 -- dp[i-1][1] - prices[i]
		// 今天为持有股票状态可由以上3种情况达到 -- 取以上3种情况的最大值
		dp[i][0] = max(dp[i-1][0], max(dp[i-1][3], dp[i-1][1])-prices[i])

		// 达到今天为未持有股票状态且不是冷冻期，有2种情况：
		// 1. 前一天就已经是未持有股票状态且不是冷冻期 -- dp[i-1][1]
		// 2. 前一天为未持有股票但处于冷冻期，今天就不再是冷冻期了 -- dp[i-1][3]
		// 今天为未持有股票状态且不是冷冻期状态可由以上2种情况达到 -- 取以上3种情况的最大值
		dp[i][1] = max(dp[i-1][1], dp[i-1][3])

		// 达到今天卖出股票，有1种情况：
		// 1. 前一天为持有股票状态，在今天卖出 -- dp[i-1][0] + prices[i]
		dp[i][2] = dp[i-1][0] + prices[i]

		// 达到今天为冷冻期状态，有1种情况：
		// 1. 前一天卖出了股票（卖出股票的后一天为冷冻期） -- dp[i-1][2]
		dp[i][3] = dp[i-1][2]
	}

	// 返回最后一天 状态2、状态3、状态4 的最大值
	return max(dp[len(prices)-1][3], max(dp[len(prices)-1][1], dp[len(prices)-1][2]))
}
