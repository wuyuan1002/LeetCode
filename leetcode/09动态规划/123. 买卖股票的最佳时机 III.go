package main

// 123. 买卖股票的最佳时机 III

// 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
// 设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。
//
// 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

// maxProfit123 .
// 一天共有五种状态(状态j)：0没有操作、1第一次买入、2第一次卖出、3第二次买入、4第二次卖出
//
// dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
func maxProfit123(prices []int) int {
	// 构造dp数组 -- dp[i][j]表示第i天状态j时所持有的最大现金数量(越大说明越有钱)
	dp := make([][5]int, len(prices))

	// 初始化dp数组
	dp[0][0] = 0
	dp[0][1] = -prices[0]
	dp[0][2] = 0
	dp[0][3] = -prices[0]
	dp[0][4] = 0

	// 遍历每天的股票，计算每天的四种状态所持有的最大现金数量
	for i := 1; i < len(prices); i++ {
		dp[i][0] = dp[i-1][0]                            // 保持前一天的未操作状态
		dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i]) // 保持前一天的买入状态或在前一天没有买入时进行买入
		dp[i][2] = max(dp[i-1][2], dp[i-1][1]+prices[i]) // 保持前一天的卖出状态或在前一天没有卖出时卖出
		dp[i][3] = max(dp[i-1][3], dp[i-1][2]-prices[i]) // 保持前一天的买入状态或在前一天没有买入时进行买入
		dp[i][4] = max(dp[i-1][4], dp[i-1][3]+prices[i]) // 保持前一天的卖出状态或在前一天没有卖出时卖出
	}

	// 返回最后一天卖出股票后所持有的最大现金数量
	return dp[len(prices)-1][4]
}
