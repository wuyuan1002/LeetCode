package main

// 448. 找到所有数组中消失的数字

// 给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。
// 请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。

// findDisappearedNumbers .
//
// 1. 将数组存入map，遍历 1~n 判断数字是否存在
// 2. 原地哈希
// 因为数字都在[1, n]范围内，所以可以使用数组下标作为key，使用下标处数字的正负值记录该下标对应的数字是否出现过
// 首先遍历数组，将每个数字对应的下标处数字置为负数表示该数字出现过
// 之后遍历[1, n]，若对应下标处数字为正数说明数字n没出现过，将数字计入结果集
func findDisappearedNumbers(nums []int) []int {
	result := make([]int, 0)

	// 遍历数组 -- 将每个出现的数字对应下标处数字标记为负数表示对应数字出现过，遍历完后，数组中为正数的数字下标对应的数字即为没出现过的数字
	for i := 0; i < len(nums); i++ {
		// 获取当前数字的绝对值 -- 因为当前位置数字可能为负数, 所以要使用绝对值
		num := abs(nums[i])

		// 若对应下标处的数字大于0说明当前数字第一次出现，将下标处对应数字标记为负数表示当前数字出现过，
		// 若已是负数则说明当前数字出现过不止一次，不做操作
		if nums[num-1] > 0 {
			nums[num-1] = -nums[num-1]
		}
	}

	// 遍历[1, n] -- 将所有对应数字大于0的n记录到结果集表示数字n没有出现过
	for n := 1; n <= len(nums); n++ {
		if nums[n-1] > 0 {
			result = append(result, n)
		}
	}

	return result
}
