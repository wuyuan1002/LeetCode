package main

// 448. 找到所有数组中消失的数字

// 给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。
// 请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。

// findDisappearedNumbers .
//
// 原地哈希
// 使用 下标k 处数字的正负号表示 数字k+1 是否在数组中出现过
//
// 首次遍历数组进行数字是否出现标记，若下标处数字为正，说明该数字是第一次出现，将下标处数字置为负数
// 再次遍历数组，数组中所有为正数的下标所表示的数字即为缺失的数字，将其记入结果集
func findDisappearedNumbers(nums []int) []int {
	result := make([]int, 0)

	// 遍历数组 -- 将每个出现的数字对应下标处数字标记为负数表示对应数字出现过，遍历完后，数组中为正数的数字下标对应的数字即为没出现过的数字
	for i := 0; i < len(nums); i++ {
		// 获取当前数字的绝对值 -- 因为当前位置数字可能为负数, 所以要使用绝对值
		n := abs(nums[i])

		// 若对应下标处的数字大于0说明当前数字第一次出现，将下标处对应数字标记为负数表示当前数字出现过，
		// 若已是负数则说明当前数字出现过不止一次，不做操作
		if nums[n-1] > 0 {
			nums[n-1] = -nums[n-1]
		}
	}

	// 遍历数字[1, n] -- 若下标n-1处数字是否大于0说明数字n未出现过
	for n := 1; n <= len(nums); n++ {
		if nums[n-1] > 0 {
			result = append(result, n)
		}
	}

	return result
}
